---
# tasks file for jpnewman.elk-packetbeat

# SSL Cert
- name: Create directory to store ssl crt & key
  tags: ["ssl"]
  file: path={{ ssl_cert_directory }} state=directory

- name: Copy SSL cert
  tags: ["ssl"]
  copy: src={{ ssl_cert_local_directory }}/{{ ssl_cert }} dest={{ ssl_cert_directory }}
  notify: restart packetbeat

- name: Copy SSL key
  tags: ["ssl"]
  copy: src={{ ssl_cert_local_directory }}/{{ ssl_key }} dest={{ ssl_cert_directory }}
  notify: restart packetbeat

# GeoIP database
- name: Install zip programs
  apt: name={{ item }} state=latest update_cache=yes cache_valid_time={{ apt_cache_valid_time }}
  with_items:
    - gzip

- name: Download GeoIP database
  get_url: url={{ geoip_database_url_path}}/{{ geoip_database_url_filename }} dest=/tmp
  register: get_geoip_database

- name: Get gzip version
  shell: dpkg -s gzip | grep Version | awk '{print $2}' | sed -e 's/-.*$//g'
  register: gzip_version
  always_run: True
  ignore_errors: True

- debug: msg="gzip version {{ gzip_version.stdout }}"

- name: Extract GeoIP database
  command: gunzip --keep {{ geoip_database_url_filename }}
  args:
    chdir: /tmp
    creates: "{{ geoip_database_extracted_filename }}"
  when: "{{ gzip_version.stdout | version_compare('1.6', '>=', strict=True) }} and {{ get_geoip_database | changed }}"

- name: Extract GeoIP database, with older gzip version
  command: gunzip {{ geoip_database_url_filename }}
  args:
    chdir: /tmp
    creates: "{{ geoip_database_extracted_filename }}"
  when: "{{ gzip_version.stdout | version_compare('1.6', '<', strict=True) }} and {{ get_geoip_database | changed }}"

- name: Create GeoIP directories
  file: path={{ item | dirname }} state=directory
  with_items: geoip_database_paths

- name: Coping GeoIP databases
  command: cp /tmp/{{ geoip_database_extracted_filename }} {{ item }}
  with_items: geoip_database_paths
  when: get_geoip_database | changed

# Config
- name: Install Packetbeat dependencies
  apt: name=libpcap0.8 state=present update_cache=yes cache_valid_time={{ apt_cache_valid_time }}

- name: Check if Packetbeat is already at the right version
  shell: dpkg -s packetbeat | grep Version | awk '{print $2}'
  register: installed_version
  always_run: True
  ignore_errors: True

- name: Download Packetbeat agent
  get_url:
    url: https://download.elastic.co/beats/packetbeat/packetbeat_{{ packetbeat_version }}_{{ packetbeat_platform }}.deb
    dest: /tmp
  when: installed_version.stdout != '{{ packetbeat_version_check }}'

- name: Install Packetbeat agent
  apt: deb=/tmp/packetbeat_{{ packetbeat_version }}_{{ packetbeat_platform }}.deb
  when: installed_version.stdout != '{{ packetbeat_version_check }}'

- name: Create directory for Packetbeat Configures
  file: path=/var/log/packetbeat state=directory

- name: Configure Packetbeat
  template: src=packetbeat.yml.j2 dest=/etc/packetbeat/packetbeat.yml
  notify: restart packetbeat

- name: Index Packetbeat Elasticsearch
  shell: curl -XPUT 'http://{{ packetbeat_elasticsearch_host }}/_template/packetbeat' -d@/etc/packetbeat/packetbeat.template.json

- name: Start Packetbeat
  service: name=packetbeat state=started enabled=yes
